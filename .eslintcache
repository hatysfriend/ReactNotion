[{"C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\index.js":"1","C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\reportWebVitals.js":"2","C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\App.js":"3","C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\components\\PageComponent.jsx":"4","C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\components\\SidebarComponent.jsx":"5","C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\components\\HeaderComponent.jsx":"6"},{"size":524,"mtime":1610705161692,"results":"7","hashOfConfig":"8"},{"size":375,"mtime":1610695518735,"results":"9","hashOfConfig":"8"},{"size":454,"mtime":1610864289718,"results":"10","hashOfConfig":"8"},{"size":655,"mtime":1610955258530,"results":"11","hashOfConfig":"8"},{"size":3567,"mtime":1610882182775,"results":"12","hashOfConfig":"8"},{"size":497,"mtime":1610955079113,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"e0insv",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\index.js",[],["28","29"],"C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\reportWebVitals.js",[],"C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\App.js",[],"C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\components\\PageComponent.jsx",["30","31","32"],"C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\components\\SidebarComponent.jsx",["33","34","35","36","37","38","39","40"],"import React, { useState, setState, createElement, useEffect } from \"react\";\r\nimport { Route, NavLink, HashRouter } from \"react-router-dom\"\r\nimport PageComponent from \"./PageComponent\";\r\nimport \"../styles/sidebar.css\";\r\n\r\n\r\n\r\n\r\nexport default function SidebarComponent() {\r\n  const [pageList, setPageList] = useState([new PageComponent()]);\r\n  const [showtextbox, setShowTextbox] = useState(false);\r\n  let newpageName;\r\n  const icon =<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-caret-down-fill\" viewBox=\"0 0 16 16\">\r\n  <path d=\"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"/></svg>;\r\n\r\n  \r\n\r\n\r\n\r\n  //function to enable textbox and button\r\n  function AddNewfile(bool) {\r\n    console.log('object here? :'+new PageComponent().getName())\r\n    if (bool) {\r\n      return (\r\n      <React.Fragment className='nav_input_btn'>\r\n        <input id='newfile' className='addinput' type='text' />\r\n        <button className='addbtn2' onClick={() => getfileName()}>âœ”</button>\r\n      </React.Fragment>\r\n      );\r\n    }\r\n    else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  //1. function to recive new page data\r\n  //2. when add new page btn clicked , store the new page data to setPageList()\r\n  function getfileName() {\r\n    const value = document.getElementById(\"newfile\").value\r\n    if (value == '' || value == null) {\r\n      document.getElementById(\"errorMessage\").value = <p>error</p>;\r\n    }\r\n    else {\r\n      let boolExistingName = false;\r\n      pageList.map(page=>{\r\n        if(page.getName() ==value)\r\n           boolExistingName=true;\r\n      })\r\n      if(!boolExistingName){\r\n        console.log(value);\r\n      newpageName = value;\r\n\r\n      const list = [...pageList]\r\n      const pageObj = new newpageObj(newpageName);\r\n      list.push(pageObj);\r\n      setPageList(list);\r\n      setShowTextbox(!showtextbox);\r\n    }\r\n    }\r\n}\r\nfunction newpageObj(newpageName) {\r\n  const randomID = Math.random().toString(36).substring(7)\r\n  const pageObj = new PageComponent(randomID,newpageName)\r\n    return pageObj;\r\n    \r\n}\r\n\r\n  return (\r\n    <HashRouter>\r\n      \r\n      <head>\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n        </meta>\r\n      </head>\r\n\r\n      <body>\r\n        {/* sidebar_header */}\r\n        <div className=\"sidenav a\">\r\n          <img src='imgs/icon.png' alt='' height='28px' width='35px'></img>\r\n          <h1>React Notion</h1>\r\n\r\n\r\n          {/* sidebar_add_NewFile_btn */}\r\n          <div>\r\n            <div className='addbtn' onClick={() => \r\n              setShowTextbox(!showtextbox)}>+ Add New File</div> \r\n              {AddNewfile(showtextbox)}\r\n              <text className=\"errorMessage\" value='' id=\"errorMessage\"></text>\r\n            </div>\r\n          \r\n          \r\n          {/* showing pagelist */}\r\n          {pageList.map((page) => {\r\n            console.log('this is pagelist: '+page.getName())\r\n            return<div>\r\n              <div className='navFont' to=\"/\">{icon}{page.getName()}</div>\r\n\r\n              {/* showing child pages */}\r\n              {/* {if(page.file_inside.length ==0){\r\n                page.file_inside.map(small_page=>{\r\n                  <div>L<div>\r\n                })\r\n              }} */}\r\n\r\n              </div>;\r\n              \r\n          })}\r\n        </div>\r\n\r\n        {/* routing */}\r\n        {/* <div>\r\n          <Route path=\"/\" component={PageComponent}/>\r\n        </div> */}\r\n\r\n      </body>\r\n\r\n    </HashRouter>\r\n  );\r\n}\r\n// function loadPage(id) {\r\n// }\r\n\r\n\r\n","C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\components\\HeaderComponent.jsx",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":1,"column":28,"nodeType":"47","messageId":"48","endLine":1,"endColumn":36},{"ruleId":"45","severity":1,"message":"49","line":1,"column":38,"nodeType":"47","messageId":"48","endLine":1,"endColumn":47},{"ruleId":"45","severity":1,"message":"50","line":1,"column":49,"nodeType":"47","messageId":"48","endLine":1,"endColumn":55},{"ruleId":"45","severity":1,"message":"51","line":1,"column":27,"nodeType":"47","messageId":"48","endLine":1,"endColumn":35},{"ruleId":"45","severity":1,"message":"52","line":1,"column":37,"nodeType":"47","messageId":"48","endLine":1,"endColumn":50},{"ruleId":"45","severity":1,"message":"49","line":1,"column":52,"nodeType":"47","messageId":"48","endLine":1,"endColumn":61},{"ruleId":"45","severity":1,"message":"53","line":2,"column":10,"nodeType":"47","messageId":"48","endLine":2,"endColumn":15},{"ruleId":"45","severity":1,"message":"54","line":2,"column":17,"nodeType":"47","messageId":"48","endLine":2,"endColumn":24},{"ruleId":"55","severity":1,"message":"56","line":40,"column":15,"nodeType":"57","messageId":"58","endLine":40,"endColumn":17},{"ruleId":"59","severity":1,"message":"60","line":45,"column":24,"nodeType":"61","messageId":"62","endLine":45,"endColumn":26},{"ruleId":"55","severity":1,"message":"56","line":46,"column":27,"nodeType":"57","messageId":"58","endLine":46,"endColumn":29},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'setState' is defined but never used.","'createElement' is defined but never used.","'Route' is defined but never used.","'NavLink' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]