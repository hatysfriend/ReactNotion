[{"C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\index.js":"1","C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\reportWebVitals.js":"2","C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\App.js":"3","C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\components\\PageComponent.jsx":"4","C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\components\\SidebarComponent.jsx":"5"},{"size":524,"mtime":1610705161692,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1610695518735,"results":"8","hashOfConfig":"7"},{"size":294,"mtime":1610705161674,"results":"9","hashOfConfig":"7"},{"size":324,"mtime":1610705161682,"results":"10","hashOfConfig":"7"},{"size":2778,"mtime":1610788949117,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"e0insv",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\index.js",[],["25","26"],"C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\reportWebVitals.js",[],"C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\App.js",[],"C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\components\\PageComponent.jsx",["27","28","29","30"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport '../styles/page.css'\r\n\r\nexport default function PageComponent(){\r\n    const [pageList, setPageList] = useState('pageData');\r\n      return (\r\n          <div className=\"PageComponent\">\r\n              <h1>Input Notes1</h1>\r\n          </div>\r\n      )\r\n}\r\n   \r\n","C:\\Users\\urgex\\OneDrive\\Documents\\GitHub\\ReactNotion\\src\\components\\SidebarComponent.jsx",["31","32","33","34","35","36","37","38"],"import React, { useState, setState, createElement, useEffect } from \"react\";\r\nimport { Route, NavLink, HashRouter } from \"react-router-dom\"\r\nimport PageComponent from \"./PageComponent\";\r\nimport \"../styles/sidebar.css\";\r\n\r\n\r\n\r\n\r\nexport default function SidebarComponent() {\r\n  const [pageList, setPageList] = useState(defaultPage);\r\n  const [showtextbox, setShowTextbox] = useState(false);\r\n  let newpageName;\r\n\r\n  //function to enable textbox and button\r\n  function AddNewfile(bool) {\r\n    let input;\r\n    if (bool) {\r\n      input = <React.Fragment><input id='newfile' className='addinput' type='text' />\r\n      <button className='addbtn' onClick={() => getfileName()}>âœ”</button></React.Fragment>;\r\n    }\r\n    else {\r\n      input = '';\r\n    }\r\n    return input;\r\n  }\r\n\r\n  //1. function to recive new page data\r\n  //2. when add new page btn clicked , store the new page data to setPageList()\r\n  function getfileName() {\r\n    const value = document.getElementById(\"newfile\").value\r\n    if (value == '' || value == null) {\r\n      document.getElementById(\"errorMessage\").value = 'error';\r\n    }\r\n    else {\r\n      let boolExistingName = false;\r\n      pageList.map(page=>{\r\n        if(page.pageName ==value)\r\n           boolExistingName=true;\r\n      })\r\n      if(!boolExistingName){\r\n        console.log(value);\r\n      newpageName = value;\r\n\r\n      const list = [...pageList]\r\n      list.push({\r\n        pageId: \"846u9ffqm\",\r\n        pageName: newpageName,\r\n        data: \"1\",\r\n      })\r\n      setPageList(list);\r\n      setShowTextbox(!showtextbox);\r\n\r\n      }\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <HashRouter>\r\n      <head>\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n        </meta>\r\n\r\n      </head>\r\n      <body>\r\n        {/* Adding new page */}\r\n        <div className=\"sidenav a\">\r\n          <img src='imgs/icon.png' alt='' height='28px' width='35px' />\r\n          <div>\r\n            <img className='addbtn' onClick={() => setShowTextbox(!showtextbox)} \r\n            src='imgs/addNewPageIcon.webp' height='28px' width='35px'\r\n             />\r\n\r\n            {AddNewfile(showtextbox)}\r\n            <text className=\"errorMessage\" value='' id=\"errorMessage\"></text>\r\n\r\n\r\n          </div>\r\n\r\n\r\n\r\n          {/* showing pagelist */}\r\n          {pageList.map((page) => {\r\n            return <NavLink className='navFont' to=\"/\">{page.pageName}</NavLink>;\r\n          })}\r\n\r\n        </div>\r\n\r\n        {/* routing */}\r\n        {/* <div>\r\n          <Route path=\"/\" component={PageComponent}/>\r\n        </div> */}\r\n\r\n      </body>\r\n\r\n    </HashRouter>\r\n  );\r\n}\r\n// function loadPage(id) {\r\n// }\r\n\r\n\r\nconst defaultPage = [\r\n  {\r\n    pageId: \"846u9qm\",\r\n    pageName: \"React\",\r\n    data: \"1\",\r\n    file_inside: <PageComponent></PageComponent>\r\n  }\r\n];\r\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":27,"nodeType":"45","messageId":"46","endLine":1,"endColumn":36},{"ruleId":"43","severity":1,"message":"47","line":1,"column":38,"nodeType":"45","messageId":"46","endLine":1,"endColumn":44},{"ruleId":"43","severity":1,"message":"48","line":5,"column":12,"nodeType":"45","messageId":"46","endLine":5,"endColumn":20},{"ruleId":"43","severity":1,"message":"49","line":5,"column":22,"nodeType":"45","messageId":"46","endLine":5,"endColumn":33},{"ruleId":"43","severity":1,"message":"50","line":1,"column":27,"nodeType":"45","messageId":"46","endLine":1,"endColumn":35},{"ruleId":"43","severity":1,"message":"51","line":1,"column":37,"nodeType":"45","messageId":"46","endLine":1,"endColumn":50},{"ruleId":"43","severity":1,"message":"44","line":1,"column":52,"nodeType":"45","messageId":"46","endLine":1,"endColumn":61},{"ruleId":"43","severity":1,"message":"52","line":2,"column":10,"nodeType":"45","messageId":"46","endLine":2,"endColumn":15},{"ruleId":"53","severity":1,"message":"54","line":31,"column":15,"nodeType":"55","messageId":"56","endLine":31,"endColumn":17},{"ruleId":"57","severity":1,"message":"58","line":36,"column":24,"nodeType":"59","messageId":"60","endLine":36,"endColumn":26},{"ruleId":"53","severity":1,"message":"54","line":37,"column":26,"nodeType":"55","messageId":"56","endLine":37,"endColumn":28},{"ruleId":"61","severity":1,"message":"62","line":71,"column":13,"nodeType":"63","endLine":73,"endColumn":16},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'pageList' is assigned a value but never used.","'setPageList' is assigned a value but never used.","'setState' is defined but never used.","'createElement' is defined but never used.","'Route' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]